# Generated by the Protocol Buffers compiler. DO NOT EDIT!
# source: proto/gizmo.proto
# plugin: grpclib.plugin.main
import abc
import typing

import grpclib.client
import grpclib.const

if typing.TYPE_CHECKING:
    import grpclib.server

import google.api.annotations_pb2

from . import gizmo_pb2


class GizmoServiceBase(abc.ABC):
    @abc.abstractmethod
    async def DoOne(self, stream: "grpclib.server.Stream[gizmo_pb2.DoOneRequest, gizmo_pb2.DoOneResponse]") -> None:
        pass

    @abc.abstractmethod
    async def DoOneClientStream(
        self, stream: "grpclib.server.Stream[gizmo_pb2.DoOneClientStreamRequest, gizmo_pb2.DoOneClientStreamResponse]"
    ) -> None:
        pass

    @abc.abstractmethod
    async def DoOneServerStream(
        self, stream: "grpclib.server.Stream[gizmo_pb2.DoOneServerStreamRequest, gizmo_pb2.DoOneServerStreamResponse]"
    ) -> None:
        pass

    @abc.abstractmethod
    async def DoOneBiDiStream(
        self, stream: "grpclib.server.Stream[gizmo_pb2.DoOneBiDiStreamRequest, gizmo_pb2.DoOneBiDiStreamResponse]"
    ) -> None:
        pass

    @abc.abstractmethod
    async def DoTwo(self, stream: "grpclib.server.Stream[gizmo_pb2.DoTwoRequest, gizmo_pb2.DoTwoResponse]") -> None:
        pass

    def __mapping__(self) -> typing.Dict[str, grpclib.const.Handler]:
        return {
            "/acme.component.gizmo.v1.GizmoService/DoOne": grpclib.const.Handler(
                self.DoOne,
                grpclib.const.Cardinality.UNARY_UNARY,
                gizmo_pb2.DoOneRequest,
                gizmo_pb2.DoOneResponse,
            ),
            "/acme.component.gizmo.v1.GizmoService/DoOneClientStream": grpclib.const.Handler(
                self.DoOneClientStream,
                grpclib.const.Cardinality.STREAM_UNARY,
                gizmo_pb2.DoOneClientStreamRequest,
                gizmo_pb2.DoOneClientStreamResponse,
            ),
            "/acme.component.gizmo.v1.GizmoService/DoOneServerStream": grpclib.const.Handler(
                self.DoOneServerStream,
                grpclib.const.Cardinality.UNARY_STREAM,
                gizmo_pb2.DoOneServerStreamRequest,
                gizmo_pb2.DoOneServerStreamResponse,
            ),
            "/acme.component.gizmo.v1.GizmoService/DoOneBiDiStream": grpclib.const.Handler(
                self.DoOneBiDiStream,
                grpclib.const.Cardinality.STREAM_STREAM,
                gizmo_pb2.DoOneBiDiStreamRequest,
                gizmo_pb2.DoOneBiDiStreamResponse,
            ),
            "/acme.component.gizmo.v1.GizmoService/DoTwo": grpclib.const.Handler(
                self.DoTwo,
                grpclib.const.Cardinality.UNARY_UNARY,
                gizmo_pb2.DoTwoRequest,
                gizmo_pb2.DoTwoResponse,
            ),
        }


class GizmoServiceStub:
    def __init__(self, channel: grpclib.client.Channel) -> None:
        self.DoOne = grpclib.client.UnaryUnaryMethod(
            channel,
            "/acme.component.gizmo.v1.GizmoService/DoOne",
            gizmo_pb2.DoOneRequest,
            gizmo_pb2.DoOneResponse,
        )
        self.DoOneClientStream = grpclib.client.StreamUnaryMethod(
            channel,
            "/acme.component.gizmo.v1.GizmoService/DoOneClientStream",
            gizmo_pb2.DoOneClientStreamRequest,
            gizmo_pb2.DoOneClientStreamResponse,
        )
        self.DoOneServerStream = grpclib.client.UnaryStreamMethod(
            channel,
            "/acme.component.gizmo.v1.GizmoService/DoOneServerStream",
            gizmo_pb2.DoOneServerStreamRequest,
            gizmo_pb2.DoOneServerStreamResponse,
        )
        self.DoOneBiDiStream = grpclib.client.StreamStreamMethod(
            channel,
            "/acme.component.gizmo.v1.GizmoService/DoOneBiDiStream",
            gizmo_pb2.DoOneBiDiStreamRequest,
            gizmo_pb2.DoOneBiDiStreamResponse,
        )
        self.DoTwo = grpclib.client.UnaryUnaryMethod(
            channel,
            "/acme.component.gizmo.v1.GizmoService/DoTwo",
            gizmo_pb2.DoTwoRequest,
            gizmo_pb2.DoTwoResponse,
        )
